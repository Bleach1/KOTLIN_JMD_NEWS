C数据类型：基本类型{
                    数值类型{
                             整型{
                                   短整型(short--2字节)
                                   整型(int--4字节)
                                   长整型(long--4字节)
                                 }
                            浮点型{
                                   单精度型(float--4字节)
                                   双精度型(double--8字节)
                                  }
                            }
                    字符类型(char--1字节)
                   }

           构造类型{
                    数组
                    结构体(struct)
                    共用体(union)
                    枚举类型(enum)
                    }

           指针类型     
           
           空类型void    

           有符号signed-- -128~127
           无符号unsigned-- 0~255


在C语言中默认保留小数后6位
保留对应的额位数%.num
占位符对应：%d----int
            %ld---long
            %c----char
            %f----float
            %u----unsigned
            %hd---short
            %lf---double
            %x----十六进制输出整型
            %o----八进制输出
            %s----字符串




指针：就是内存地址
      int i=10;
      int *p;
      p=&i;//把i对应的地址赋值给p

      *p//指针取值  把p对应的地址的值取出来



数组：数组的首元素地址与数组地址相同

静态内存：是程序执行编译后系统自动分配，系统自动释放  stack分配、
动态内存：是开发者手动分配   heap 分配

          malloc(int)//动态分配内存 返回地址
          realloc()//重新分配空间
          free()//回收内存

函数指针：
         int add (int x,int y)
         {
          return x+y;
                     }

        int (*pointer_function)(int x,int y);
        pointer_function=add;
        pointer_function(12,12);

union(联合体)：
              所有的字段公用一块内存空间
              各个类型之间转换

typedef int i;
         i m(别名)

结构体：
       struct student{
            int age;
            char sex;
       }

       struct student stu={18,'w'};


结构体指针： struct student *point=&stu;
             (*point).age==>>point->age

二级指针 ：  struct point2 **point=&point;
             (**point2).age==>>(*point)->age

