Fragment
生命周期：
        onAttach
        onCreate
        onCreateView
        onActivityCreated
        onStart
        onResume
        onPause
        onStop
        onDestroyView
        onDestroy
        onDetach

事务最终的提交方法有四种：
commit() 在主线程中异步执行 commit() 需要在宿主 Activity 保存状态之前调用，否则会报错。
         因为如果 Activity 出现异常需要恢复状态，在保存状态之后的 commit() 将会丢失，这和调用的初衷不符，所以会报错。
commitAllowingStateLoss()
也是异步执行，但它的不同之处在于，允许在 Activity 保存状态之后调用，也就是说它遇到状态丢失不会报错
commitNow()
commitNowAllowingStateLoss()
1.getActivity()空指针
  在Fragment基类里设置一个Activity mActivity的全局变量，在onAttach(Activity activity)里赋值，
  使用mActivity代替getActivity()
2.Fragment重叠异常
  绑定Tag、判断  savedInstanceState != null
3.出栈 pop...
4.Fragmentation
5.Fragment懒加载
  标识 视图初始化完毕、触发过加载数据 setUserVisibleHint
 Fragment空白页：
           1.viewpager.setOffscreenPageLimit(num);num为你的tab数
           2.在onCreateView里面，判断Fragment是否已经添加了contentView
           （第一次加载时，可以将view保存下来，再次加载时，判断保存下来的view是否为null），
           如果保存的view为null，返回新的view 否则，先将保存的view从父view中移除，然后将该view返回出去
           3.重写public void destroyItem(ViewGroup container, int position, Object object)
             去掉super.destroyItem(container, position, object);

自定义View执行invalidate()方法,为什么有时候不会回调onDraw()
   自定义一个view时，重写onDraw。调用view.invalidate(),会触发onDraw和computeScroll()。
   前提是该view被附加在当前窗口.view.postInvalidate(); //是在非UI线程上调用的
   自定义一个ViewGroup，重写onDraw。onDraw可能不会被调用，原因是需要先设置一个背景(颜色或图)。
   表示这个group有东西需要绘制了，才会触发draw，之后是onDraw。
   因此，一般直接重写dispatchDraw来绘制viewGroup.自定义一个ViewGroup,dispatchDraw会调用drawChild.

onTouchListener > onTouchEvent > onLongClickListener > onClickListener

1. 不论 View 自身是否注册点击事件，只要 View 是可点击的就会消费事件。
2. 事件是否被消费由返回值决定，true 表示消费，false 表示不消费，与是否使用了事件无关。

特殊区域事件
Region 的区域检测。
Matrix 的坐标映射。

上层 View 是一个 RecyclerView，它收到了一个 ACTION_DOWN 事件，由于这个可能是点击事件，所以它先传递给对应 ItemView，
询问 ItemView 是否需要这个事件，然而接下来又传递过来了一个 ACTION_MOVE 事件，且移动的方向和 RecyclerView 的可滑动方向一致，
所以 RecyclerView 判断这个事件是滚动事件，于是要收回事件处理权，这时候对应的 ItemView 会收到一个 ACTION_CANCEL ，
并且不会再收到后续事件。

如果对View的宽高进行修改了，不要调用super.onMeasure(widthMeasureSpec,heightMeasureSpec);
要调用setMeasuredDimension(widthsize,heightsize); 这个函数

82.事件分发中的 onTouch 和 onTouchEvent 有什么区别，又该如何使用？

这两个方法都是在 View 的 dispatchTouchEvent 中调用的，onTouch 优先于 onTouchEvent执行。
如果在 onTouch 方法中通过返回 true 将事件消费掉，onTouchEvent 将不会再执行。
另外需要注意的是，onTouch 能够得到执行需要两个前提条件，
第一 mOnTouchListener 的值不能为空，第二当前点击的控件必须是 enable 的。
因此如果你有一个控件是非 enable 的，
那么给它注册 onTouch 事件将永远得不到执行。对于这一类控件，如果我们想要监听它的 touch 事件，
就必须通过在该控件中重写 onTouchEvent 方法来实现。

下拉刷新：

1. 在ListView中添加header和footer，监听ListView的滑动事件，动态设置header/footer的高度，
   但是这种方式只适用于ListView，RecyclerView。
2. 第二种方式则是继承ViewGroup或其子类，监听事件，通过scroll或Layout的方式移动child。

scrollTo()和scrollBy()的区别？
 scrollBy内部调用了scrollTo，它是基于当前位置的相对滑动；而scrollTo是绝对滑动
 如果利用相同输入参数多次调用scrollTo()方法，由于View初始位置是不变只会出现一次View滚动的效果而不是多次。
view滑动冲突：
 外部拦截法：指点击事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，否则就不拦截。
 具体方法：需要重写父容器的onInterceptTouchEvent方法，在内部做出相应的拦截。
 内部拦截法：指父容器不拦截任何事件，而将所有的事件都传递给子容器，如果子容器需要此事件就直接消耗，否则就交由父容器进行处理。
 具体方法：需要配合requestDisallowInterceptTouchEvent方法。

 RecyclerView中做状态保存处理
 1.保存变更数据--position--
 2.判断两次data是否一致