并发

原子性：一个操作或者一系列骚操作，要么全部执行要么全部不执行。数据库中的“事物”就是个典型的原子操作。
可见性：当一个线程修改了共享属性的值，其它线程能立刻看到共享属性值的更改
有序性：程序的运行顺序似乎和我们编写逻辑的顺序是一致的，但计算机在实际执行中却并不一定。为了提高性能，编译器和处理器都会对代码进行重新排序。但是有个前提，重新排序的结果要和(单线程执行程序顺序)一致。
java控制并发的方式：
                  1.volatile(保证可见性,有序性)
                  2.synchronized(all)
                  3.CAS(compare and swap):
                   synchronized锁住的代码块，同一时刻只能由一个线程访问。属于悲观锁。相对于这种需要挂起线程的悲观锁，还一种由CAS实现的乐观锁。CAS包含三个部分:
                                                                            内存地址A
                                                                            预期旧值B
                                                                            预期新值C
                             在进行CAS操作时，首先比较A和B，如果相等，则更新A中的值为C并返回true     
                  4.AQS： 
   维护着一个volatile修饰的属性“state”和一个双向链表，通过使用Unsafe中CAS对“state”属性的一些列骚操作
   (实际就是把state当做标志位)实现独占锁和共享锁，独占锁和共享锁又分为公平锁和非公平锁。
  独占锁：同一时刻只有一个线程持有同一锁，其余线程在链表中排队。
  共享锁：同一时刻可以多个线程持有同一锁。
  公平锁：锁被线程持有后，其余线程排队执行。锁按照FIFO放入链表。
  非公平锁：锁被线程持有后，其余线程排队执行。锁按照FIFO放入链表。但是在刚释放锁的之后，如果有新线程竞争锁，那么新线程将和链表中下个即将被唤醒的线程竞争锁。

                  5.concurrent并发包
        并发类基本是通过lock(CAS/AQS)实现，并发容器基本是通过synchronize和lock(CAS/AQS)实现的

AtomicInteger(高并发使用 CAS算法)解决 i++线程不安全问题


区块链(BlockChain)

区块链本质上是一个去中心化的分布式账本数据库其本身是一串使用密码学相关联所产生的数据块，每一个数据块中包含了多次比特币网络交易有效确认的信息

金融领域的人会认为区块链是个分布式的账本，是一个分布式的去中心化的记账系统。
搞安全和密码学的人会说区块链是基于密码学构建的对等网络。
程序员了解了区块链技术，保证最终一致性的分布式数据库嘛。
1.去中心化
          2难题：类两军问题
                 拜占庭将军问题

2.分布式一致性
  --共识算法 ：
Paxos 其实是一类能够解决分布式一致性问题的协议，它能够让分布式网络中的节点在出现错误时仍然保持一致；
POW(Proof-of-Work):工作量证明,是一个用于阻止拒绝服务攻击和类似垃圾邮件等服务错误问题的协议  
POS:权益证明是区块链网络中的使用的另一种共识算法，在基于权益证明的密码货币中，下一个区块的选择是根据不同节点的股份和时间进行随机选择的    

简单来说，共识算法就是保证少数服从多数          

MongoDB是文档型的非关系型数据库，其优势在于查询功能比较强大，能存储海量数据
Memcached相似redis:它们都是内存型数据库，数据保存在内存中，通过tcp直接存取，优势是速度快，并发高，缺点是数据类型有限，查询功能不强，一般用作缓存

Databinding：

Binding生成规则：activity_demo.xml，则会生成ActivityDemoBinding，
                 item_search_hotel，则会生成ItemSearchHotelBinding。

自定义生成的class名字：<data class=“ContactItem”>
                        …
                       </data>
               

零个或多个import元素可能在data元素中使用：
                                         <data>
                                            <import type="android.view.View"/>
                                         </data>

                              <TextView
                                  android:text="@{user.lastName}"
                                  android:layout_width="wrap_content"
                                  android:layout_height="wrap_content"
                                  android:visibility="@{user.isAdult ? View.VISIBLE : View.GONE}"/>

当类名有冲突时，其中一个类名可以重命名为alias:
                                              <import type="android.view.View"/>
                                              <import type="com.example.real.estate.View"
                                                      alias="Vista"/>

Null Coalescing 运算符:
           android:text="@{user.displayName ?? user.lastName}"
                                   ||
           android:text="@{user.displayName != null ? user.displayName : user.lastName}"

视频：
Codec:对视频文件进行编码和解码

视频容器文件
Container format file:

App架构基本原则：SOC原则(Separation of concerns 分离关注点)->模块化，低耦合

Maven：implementation 'com.tsy:pay:1.0.0'  //groupid:projectid:version
https://blog.csdn.net/qq_23179075/article/details/71123452(将开源库发布到Jcenter上)


物理学上有四大神兽，薛定谔的猫，芝诺的乌龟，麦克斯韦的妖精和拉普拉斯妖。
https://blog.csdn.net/freekiteyu/article/details/79318031(App启动)


小程序
app.json:
         全局配置
         小程序的所有页面路径、界面表现、网络超时时间、底部 tab
         pages: 小程序所有页面路径
         window:小程序所有页面的顶部背景颜色，文字颜色定义

python爬虫
http://blog.csdn.net/sunnyxiaohu/article/details/50787430

protocol：第一部分就是协议，例如百度使用的就是https协议
hostname[:port]：第二部分就是主机名(还有端口号为可选参数)，一般网站默认的端口号为80，例如百度的主机名就是www.baidu.com，这个就是服务器的地址;      
path：第三部分就是主机资源的具体地址，如目录和文件名等

创建爬虫项目:scrapy startproject projectname
创建爬虫    :scrapy genspider xxxx xxx.com 
是否有爬虫  :scrapy list
执行爬虫    :scrapy crawl 爬虫name

Dart:
     var--Dart中var变量一旦赋值，类型便会确定，则不能再改变其类型

     dynamic
            ---会在赋值时自动进行类型推断，不同在于，赋值后可以改变其类型
     Object
     final
          ---一个 final 变量只能被设置一次，两者区别在于：const 变量是一个编译时常量，final变量在第一次使用时被初始化
     const
