JVM GC机制
1.回收算法
  (1)标记回收算法（Mark and Sweep GC）
     从”GC Roots”集合开始，将内存整个遍历一次，保留所有可以被 GC Roots 直接或间接引用到的对象，而剩下的对象都当作垃圾对待并回收，
     这个算法需要中断进程内其它组件的执行并且可能产生内存碎片。
  (2)复制算法 (Copying）
     将现有的内存空间分为两快，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，
     之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。
  (3)标记-压缩算法 (Mark-Compact)
     先需要从根节点开始对所有可达对象做一次标记，但之后，它并不简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。
     之后，清理边界外所有的空间。这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。
  (4)分代
     将所有的新建对象都放入称为年轻代的内存区域，年轻代的特点是对象会很快回收，因此，在年轻代就选择效率较高的复制算法。
     当一个对象经过几次回收后依然存活，对象就会被放入称为老生代的内存空间。对于新生代适用于复制算法，而对于老年代则采取标记-压缩算法。
2.复制和标记-压缩算法的区别
     最大的区别在于复制是用空间换时间,标记-压缩是用时间换空间
  (1)复制在工作的时候是没有独立的“mark”与“copy”阶段的，而是合在一起叫 scavenge（或 evacuate，或者就叫 copy）。
  也就是说，每发现一个这次收集中尚未访问过的活对象就直接 copy 到新空间，同时设置 forwarding pointer。这样的工作方式就需要多一份空间。
  (2)标记-压缩
     在工作的时候则需要分别的 mark 与 compact 阶段，mark 阶段用来发现并标记所有活的对象，然后 compact 阶段才移动对象到压缩空间来达到 compact 的目的。
     如果 compact 方式是 sliding compaction，则在 mark 之后就可以按顺序将对象一个个的“滑动”到空间的某一侧。因为已经先遍历了整个空间里的对象图，
     知道所有的活对象了，所以移动的时候就可以在同一个空间内而不需要多一份空间。
     所以新生代的回收会更快一点，老年代的回收则会需要更长时间，同时压缩阶段是会暂停应用的，所以给我们应该尽量避免对象出现在老年代。
3.Dalvik 虚拟机
  (1)java堆
     Java 堆由一个 Active 堆和一个 Zygote 堆组成，其中 Zygote 堆用来管理 Zygote 进程在启动过程中预加载和创建的各种对象。
     Active 堆是在 Zygote 进程 fork 第一个子进程之前创建的。以后启动的所有应用程序进程是被 Zygote 进程 fork 出来的，
     并都持有一个自己的 Dalvik 虚拟机。在创建应用程序的过程中，Dalvik 虚拟机采用 COW 策略复制 Zygote 进程的地址空间。

     COW 策略：一开始的时候（未复制 Zygote 进程的地址空间的时候），应用程序进程和 Zygote 进程共享了同一个用来分配对象的堆。
     当 Zygote 进程或者应用程序进程对该堆进行写操作时，内核就会执行真正的拷贝操作，使得 Zygote 进程和应用程序进程分别拥有自己的一份拷贝。
     因为 copy 是十分耗时的，所以必须尽量避免 copy 或者尽量少的 copy。为了实现这个目的:

     当创建第一个应用程序进程时，会将已经使用了的那部分堆内存划分为一部分，还没有使用的堆内存划分为另外一部分。
     前者就称为 Zygote 堆，后者就称为 Active 堆。这样只需把 zygote 堆中的内容复制给应用程序进程就可以了。
     以后无论是 Zygote 进程，还是应用程序进程，当它们需要分配对象的时候，都在 Active 堆上进行。
     这样就可以使得 Zygote 堆尽可能少地被执行写操作，因而就可以减少执行写时拷贝的操作。
     在 Zygote 堆里面分配的对象其实主要就是 Zygote 进程在启动过程中预加载的类、资源和对象了。
     这意味着这些预加载的类、资源和对象可以在 Zygote 进程和应用程序进程中做到长期共享。这样既能减少拷贝操作，还能减少对内存的需求。
  (2)与GC相关的一些指标
     在启动 Dalvik 虚拟机的时候，我们可以分别通过-Xms、-Xmx和-XX:HeapGrowthLimit三个选项来指定上述三个值，以上三个值分别表示

         Starting Size： Dalvik 虚拟机启动的时候，会先分配一块初始的堆内存给虚拟机使用。
         Growth Limit ： 是系统给每一个程序的最大堆上限,超过这个上限，程序就会 OOM
         Maximum Size ： 不受控情况下的最大堆内存大小，起始就是我们在用 largeheap 属性的时候，可以从系统获取的最大堆大小
     堆最小空闲值（Min Free）、堆最大空闲值（Max Free）和堆目标利用率（Target Utilization）。
     假设在某一次 GC 之后，存活对象占用内存的大小为 LiveSize，那么这时候堆的理想大小应该为(LiveSize / U)。
     但是(LiveSize / U)必须大于等于(LiveSize + MinFree)并且小于等于(LiveSize + MaxFree)，
     每次 GC 后垃圾回收器都会尽量让堆的利用率往目标利用率靠拢。
  (3)GC 的类型
     GC_FOR_MALLOC: 表示是在堆上分配对象时内存不足触发的 GC。
     GC_CONCURRENT: 当我们应用程序的堆内存达到一定量，或者可以理解为快要满的时候，系统会自动触发 GC 操作来释放内存。
     GC_EXPLICIT  : 表示是应用程序调用 System.gc、VMRuntime.gc 接口或者收到 SIGUSR1 信号时触发的 GC。
     GC_BEFORE_OOM: 表示是在准备抛 OOM 异常之前进行的最后努力而触发的 GC。
  (4)对象的分配和 GC 触发时机
     1--调用函数 dvmHeapSourceAlloc 在 Java 堆上分配指定大小的内存。如果分配成功，那么就将分配得到的地址直接返回给调用者了。
        函数 dvmHeapSourceAlloc 在不改变 Java 堆当前大小的前提下进行内存分配，这是属于轻量级的内存分配动作。
     2--如果上一步内存分配失败，这时候就需要执行一次 GC 了。不过如果 GC 线程已经在运行中，即 gDvm.gcHeap->gcRunning 的值等于 true，
        那么就直接调用函数 dvmWaitForConcurrentGcToComplete 等到 GC 执行完成就是了。否则的话，就需要调用函数 gcForMalloc 来执行一次 GC 了，
        参数 false 表示不要回收软引用对象引用的对象。
     3--GC 执行完毕后，再次调用函数 dvmHeapSourceAlloc 尝试轻量级的内存分配操作。如果分配成功，那么就将分配得到的地址直接返回给调用者了。
     4--如果上一步内存分配失败，这时候就得考虑先将 Java 堆的当前大小设置为 Dalvik 虚拟机启动时指定的 Java 堆最大值，再进行内存分配了。
        这是通过调用函数 dvmHeapSourceAllocAndGrow 来实现的。
     5--如果调用函数 dvmHeapSourceAllocAndGrow 分配内存成功，则直接将分配得到的地址直接返回给调用者了。
     6--如果上一步内存分配还是失败，这时候就得出狠招了。再次调用函数 gcForMalloc 来执行 GC。参数 true 表示要回收软引用对象引用的对象。
     7--GC 执行完毕，再次调用函数 dvmHeapSourceAllocAndGrow 进行内存分配。这是最后一次努力了，成功与否都到此为止。
     通过这个流程可以看到，在对象的分配中会导致 GC，第一次分配对象失败我们会触发 GC 但是不回收 Soft 的引用，
     如果再次分配还是失败我们就会将 Soft 的内存也给回收，前者触发的 GC 是 GC_FOR_MALLOC 类型的 GC，后者是 GC_BEFORE_OOM 类型的 GC。
     而当内存分配成功后，我们会判断当前的内存占用是否是达到了 GC_CONCURRENT 的阀值，如果达到了那么又会触发 GC_CONCURRENT。
     那么这个阀值又是如何来的呢，上面我们说到的一个目标利用率，GC 后我们会记录一个目标值，这个值理论上需要再上述的范围之内，
     如果不在我们会选取边界值做为目标值。虚拟机会记录这个目标值，当做当前允许总的可以分配到的内存。同时根据目标值减去固定值（200~500K),
     当做触发 GC_CONCURRENT 事件的阈值。
  (5)回收算法和内存碎片
     主流的大部分 Davik 采取的都是标注与清理（Mark and Sweep）回收算法，也有实现了拷贝 GC 的
     Mark and Sweep 算法的缺点，容易导致内存碎片，所以在这个算法下，当我们有大量不连续小内存的时候，再分配一个较大对象时，还是会非常容易导致 GC
     对于 Dalvik 虚拟机的手机来说，我们首先要尽量避免掉频繁生成很多临时小变量（getView，onDraw 等函数），尽量去避免产生很多长生命周期的大对象。
4.ART 内存回收机制
  (1)java堆
     ART 运行时内部使用的 Java 堆的主要组成包括： Image Space、Zygote Space、Allocation Space 、Large Object Space。
     Image Space 用来存在一些预加载的类，
     Zygote Space 和 Allocation Space 与 Dalvik 虚拟机垃圾收集机制中的 Zygote 堆和 Active 堆的作用是一样的，
     Large Object Space 就是一些离散地址的集合，用来分配一些大对象从而提高了 GC 的管理效率和整体性能
  (2)GC 的类型
     kGcCauseForAlloc   :  当要分配内存的时候发现内存不够的情况下引起的 GC，这种情况下的 GC 会 stop world
     kGcCauseBackground :  当内存达到一定的阀值的时候会去出发 GC，这个时候是一个后台 gc，不会引起 stop world
     kGcCauseExplicit   :  显示调用的时候进行的 gc，如果 art 打开了这个选项的情况下，在 system.gc 的时候会进行 gc
     其他更多
  (3)对象的分配和 GC 触发时机
     Art 下内存分配和 Dalvik 下基本没有任何区别
  (4)并发和非并发 GC
     1--非并发 GC
        步骤 1. 调用子类实现的成员函数 InitializePhase 执行 GC 初始化阶段。
        步骤 2. 挂起所有的 ART 运行时线程。
        步骤 3. 调用子类实现的成员函数 MarkingPhase 执行 GC 标记阶段。
        步骤 4. 调用子类实现的成员函数 ReclaimPhase 执行 GC 回收阶段。
        步骤 5. 恢复第 2 步挂起的 ART 运行时线程。
        步骤 6. 调用子类实现的成员函数 FinishPhase 执行 GC 结束阶段
     2--并发 GC
        步骤 1. 调用子类实现的成员函数 InitializePhase 执行 GC 初始化阶段。
        步骤 2. 获取用于访问 Java 堆的锁。
        步骤 3. 调用子类实现的成员函数 MarkingPhase 执行 GC 并行标记阶段。
        步骤 4. 释放用于访问 Java 堆的锁。
        步骤 5. 挂起所有的 ART 运行时线程。
        步骤 6. 调用子类实现的成员函数 HandleDirtyObjectsPhase 处理在 GC 并行标记阶段被修改的对象。。
        步骤 7. 恢复第 4 步挂起的 ART 运行时线程。
        步骤 8. 重复第 5 到第 7 步，直到所有在 GC 并行阶段被修改的对象都处理完成。
        步骤 9. 获取用于访问 Java 堆的锁。
        步骤 10. 调用子类实现的成员函数 ReclaimPhase 执行 GC 回收阶段。
        步骤 11. 释放用于访问 Java 堆的锁。
        步骤 12. 调用子类实现的成员函数 FinishPhase 执行 GC 结束阶段。
  (5)Art 并发和 Dalvik 并发 GC 的差异
     1--标记自身
        Art 在对象分配时会将新分配的对象压入到 Heap 类的成员变量 allocation_stack_ 描述的 Allocation Stack 中去，从而可以一定程度缩减对象遍历范围。
     2--预读取
        对于标记 Allocation Stack 的内存时，会预读取接下来要遍历的对象，同时再取出来该对象后又会将该对象引用的其他对象压入栈中，直至遍历完毕。
     3--减少 Pause 时间
        在 Mark 阶段是不会 Block 其他线程的，这个阶段会有脏数据，比如 Mark 发现不会使用的但是这个时候又被其他线程使用的数据，
        在 Mark 阶段也会处理一些脏数据而不是留在最后 Block 的时候再去处理，这样也会减少后面 Block 阶段对于脏数据的处理的时间。




