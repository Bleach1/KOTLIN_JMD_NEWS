类加载器以及加载机制
1.加载器
  (1)当你写完了一个.java文件的时候，编译器会把他编译成一个由字节码组成的class文件，当程序运行时，JVM会首先寻找包含有main()方法的类，
     把这个class文件中的字节码数据读入进来，转化成JVM中运行时对应的Class对象。执行这个动作的，就叫类加载器。
  (2)类加载器分类
     1--Bootstrap ClassLoader(启动类加载器)
        负责将一些核心的，被JVM识别的类加载进来，用C++实现，与JVM是一体的。
     2--Extension ClassLoader(扩展类加载器)
        用来加载 Java 的扩展库
     3--Applicaiton ClassLoader(应用程序类加载器)
        用于加载我们自己定义编写的类
     4--User ClassLoader （用户自己实现的加载器）
        当实际需要自己掌控类加载过程时才会用到，一般没有用到
  (3)双亲委派模型
     1--java类加载器的体系结构
                           引导类加载器
                                |
                           扩展类加载器
                                |
                           系统类加载器
                                |
                               / \
            coder编写的类加载器A    coder编写的类加载器B
                                             |
                                            / \
                        coder编写的类加载器B1   coder编写的类加载器B2
     2--类加载逻辑
        protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException
            {
                synchronized (getClassLoadingLock(name)) {

                    (1)首先检查class是否已经被加载

                    Class c = findLoadedClass(name);
                    if (c == null) {
                        long t0 = System.nanoTime();
                        try {

                            (2)如果class没有被加载且已经设置parent,那么请求其父加载器加载

                            if (parent != null) {
                                c = parent.loadClass(name, false);
                            } else {

                              (3)如果没有设定parent类加载器，则寻找BootstrapClass并尝试使用BootstrapClassloader加载

                                c = findBootstrapClassOrNull(name);
                            }
                        } catch (ClassNotFoundException e) {
                            // ClassNotFoundException thrown if class not found
                            // from the non-null parent class loader
                        }

                         (4)如果当前这个loader所有的父加载器以及顶层的Bootstrap ClassLoader都不能加载待加载的类
                            那么则调用自己的findClass()方法来加载

                        if (c == null) {
                            // If still not found, then invoke findClass in order
                            // to find the class.
                            long t1 = System.nanoTime();
                            c = findClass(name);

                            // this is the defining class loader; record the stats
                            sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
                            sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
                            sun.misc.PerfCounter.getFindClasses().increment();
                        }
                    }
                    if (resolve) {
                        resolveClass(c);
                    }
                    return c;
                }
            }
     3--“双亲委派模型”简单来说就是：
                                 1.先检查需要加载的类是否已经被加载，如果没有被加载，则委托父加载器加载，父类继续检查，尝试请父类加载，
                                   这个过程是从下---> 上;
                                 2.如果走到顶层发现类没有被加载过，那么会从顶层开始往下逐层尝试加载，这个过程是从上---> 下;
     4--注意的问题
        1.事实上加载器之间不是通过继承，而是通过组合的方式来实现整个加载过程，即每个加载器都持有上层加载器的引用，所以父加载器是一种笼统的说法
        2.JVM除了比较类是否相等还要比较加载这两个类的类加载器是否相等，只有同时满足条件，两个类才能被认定是相等的。
        3.为什么双亲委派模型要有三层加载器而不是一层？
          三层类加载器代表了JVM对于待加载类的三个信任层次，当需要加载一个全限定名为java.lang.Object的类时，JVM会首先信任顶层的引导类加载器，
          即优先用这个加载器尝试加载，如果不行，JVM会选择继续信任第二层的拓展类加载器，往下，知道三层都无法加载，
          JVM才会选择信任开发者自己定义的加载器。这种”父类“优先的加载次序有效的防止了恶意代码的加载。
     5--双亲委派模型有效解决了以下问题
        1.每一个类都只会被加载一次，避免了重复加载
        2.每一个类都会被尽可能的加载(从引导类加载器往下，每个加载器都可能会根据优先次序尝试加载它)
        3.有效避免了某些恶意类的加载(比如自定义了Java.lang.Object类，一般而言在双亲委派模型下会加载系统的Object类而不是自定义的Object类)
        4.命名空间：
                  竖直方向上，父加载器中加载的类对于所有子加载器可见
                  水平方向上，子类之间各自加载的类对于各自是不可见的（达到隔离效果）



