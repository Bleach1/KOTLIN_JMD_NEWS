
Ctrl+Shift+U 大小写

beforeDescendants：ViewGroup 会优先其子类控件而获取到焦点
afterDescendants：ViewGroup 只有当其子类控件不需要获取焦点时才获取焦点
blocksDescendants：ViewGroup 会覆盖子类控件而直接获得焦点
即在Item布局的根布局加上android:descendantFocusability=”blocksDescendants”

在Terminal  .\gradlew clean build
            .\gradlew -q app :dependencies build

            // XXX表示想打印的module的name
            gradle XXX:dependencies


在Terminal中  keytool -v -list -keystore c:\Users\asus\.android\xxxx.jks

ctrl +alt +M 提取 方法，style，layout
ctrl +H  继承层级
ctrl +alt +F 提取变量
右键  find sample code
光标放在控件中 提取style  refactor extract style

ConstraintLayout:
https://blog.csdn.net/qq_21793463/article/details/80003303
layout_constraint[自身控件位置]_[目标控件位置]="[目标控件ID]"
layout_constraintLeft_toLeftOf 指自身左边缘与目标控件左边缘对齐
layout_constraintBaseline_toBaselineOf设置两个控件之间的文字相对于baseline对齐




当A控件 约束 在B控件的左边，B控件GONE了，此时A会额外拥有一个margin的能力，来“补充”B消失的导致的“位移”。
   android:layout_marginRight="10dp"
   app:layout_goneMarginRight="110dp"
一起使用，在约束的布局gone时，起用goneMargin


倾向（Bias）:bias属性是指在对齐父容器后，设置水平与竖直的比例
             layout_constraintHorizontal_bias (0最左边 1最右边)
             layout_constraintVertical_bias (0最上边 1 最底边)


设置宽高比  前提条件是至少有一个尺寸设置为0dp
app:layout_constraintDimensionRatio="H,16:9"

layout_constraintGuide_begin=”xxdp”：基准线开始方向xxdp
layout_constraintGuide_end=”xxdp”：基准线结束方向xxdp
layout_constraintGuide_percent=”0.3”：基准线开始方向距离的父控件大小的百分比。

layout_constraintHorizontal_chainStyle:
                                       spread：均匀分布
                                       spread_inside：均匀分布，但是边上的控件不均匀分布
                                       packed：控件紧挨在一起。还可以通过bias属性设置偏移量。
layout_constraintHorizontal_weight：跟线性布局的weight差不多 width=0

FlexBoxLayout:

 flexDirection: 决定主轴项目排列方向

                        row：主轴为水平方向，起点在左端
                row_reverse：主轴为水平方向，起点在右端。
                     column：主轴为垂直方向，起点在上沿
             column_reverse：主轴为垂直方向，起点在下沿

      flexWrap: 换行排列

               nowrap ：不换行
                  wrap：按正常方向换行
          wrap_reverse：按反方向换行

justifyContent:定义了项目在主轴上的对齐方式

                        flex_start：左对齐
                          flex_end：右对齐
                            center：居中
                     space_between：两端对齐，项目之间的间隔都相等。
                      space_around：每个项目两侧的间隔相等。项目之间的间隔比项目与边框的间隔大一倍。


   alignItems:定义项目在副轴轴上如何对齐(纵轴)

              flex-start：交叉轴的起点对齐。
                flex-end：交叉轴的终点对齐。
                  center：交叉轴的中点对齐。
                baseline: 项目的第一行文字的基线对齐。
                 stretch：如果项目未设置高度或设为auto，将占满整个容器的高度。

 alignContent:定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用

              flex_start：与交叉轴的起点对齐。
                flex_end：与交叉轴的终点对齐。
                  center：与交叉轴的中点对齐。
           space_between：与交叉轴两端对齐，轴线之间的间隔平均分布。
            space_around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
                 stretch：轴线占满整个交叉轴。


Child属性：
             layout_order：负值在前，正值在后，按照从小到大的顺序依次排列
          layout_flexGrow：定义项目的放大比例，默认为0 其实就是 LinearLayout 中的weight属性
        layout_flexShrink：属性定义了项目的缩小比例，默认为1 即如果空间不足，该项目将缩小。
                           如果所有项目的 layout_flexShrink 属性都为1，当空间不足时，都将等比例缩小。
                           如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。
        layout_alignSelf ：允许单个子元素有与其他子元素不一样的对齐方式，可覆盖 alignItems 属性。
                           默认值为auto，表示继承父元素的alignItems 属性，如果没有父元素，则等同于stretch。
  layout_flexBasisPercent：定义了在分配多余空间之前，子元素占据的主轴空间的百分比。它的默认值为auto，即子元素的本来大小。

设置百分比
layout_constraintWidth_percent
layout_constraintHeight_percent
圆形约束
constraintCircle


<include>标签的parent ViewGroup与包含的layout根容器ViewGroup是相同的类型
merge inflate时attachToRoot为true



