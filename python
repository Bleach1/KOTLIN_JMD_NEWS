http://www.runoob.com/python3/python3-tutorial.html
https://www.liaoxuefeng.com/

https://juejin.im/post/5a954e42f265da4e777fd6ea(Python入门)

tips:
{
注意缩进 important
Number:
1、Python可以同时为多个变量赋值，如a, b = 1, 2。
2、一个变量可以通过赋值指向不同类型的对象。
3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。
4、在混合计算时，Python会把整型转换成为浮点数。
5、可以使用反斜杠(\)来实现多行语句
String:
1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 print('Ru\moor')  print(r'Ru\moor')
2、字符串可以用+运算符连接在一起，用*运算符重复。
3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
4、Python中的字符串不能改变。
5.在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes (x = b'ABC')


yield 是一个类似 return 的关键字，只是这个函数返回的是个生成器。

}
一、基本数据类型：
None  空
Number（数字）-->> int、float、bool、complex（复数）
String（字符串）   str[indexStart:indexEnd]截取字符串
                  三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符

List（列表）      [] 元素可变    可用+相加    for x in list  迭代
Tuple（元组）     () 元素不可变  可用+相加  tup1 = () # 空元组
                                            tup2 = (20,) # 一个元素，需要在元素后添加逗号

Sets（集合）      {} set(list)创建   创建一个空集合必须用 set() 而不是 { }

Dictionary（字典） 创建空字典使用 { }
                   str(dict)  字符串形式输出字典
                   clear()
                   删除字典内所有元素
                   copy()
                   返回一个字典的浅复制
                   fromkeys()
                   创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
                   get(key, default=None)
                   返回指定键的值，如果值不在字典中返回default值
                   key in dict
                   如果键在字典dict里返回true，否则返回false
                   items()
                   以列表返回可遍历的(键, 值) 元组数组
                   keys()
                   以列表返回一个字典所有的键
                   setdefault(key, default=None)
                   和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
                   update(dict2)
                   把字典dict2的键/值对更新到dict里
                   values()
                   以列表返回字典中的所有值
                   pop(key[,default])
                   删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。
                   popitem()
                   随机返回并删除字典中的一对键和值(一般删除末尾对)。

                   关键字和对应的值可以使用 items() 方法同时解读出来 for k, v in knights.items():

判断类型：
type()不会认为子类是一种父类类型。
isinstance()会认为子类是一种父类类型。
二、注释：
单行注释 #
多行注释 多行注释用三个单引号 ''' 或者三个双引号 """ 将注释括起来
三、运算符
** 幂          a**b结果a的b次方
// 取整除      9//4 结果2
x and y       布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值
x or y        布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值
not x         布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。

is 与 == 区别：
is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。

四、迭代器和生成器
迭代器有两个基本的方法：iter(list) 和 next()。
生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。
在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回yield的值
五、函数

默认值参数 # 如果是一个 list ，可以使用 None 作为默认值
不定长参数：def printinfo( arg1, *vartuple ): 如果在函数调用时没有指定参数，它就是一个空元组tuple
关键字参数：def person(name, age, **kw):   关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict
匿名函数：sum = lambda arg1, arg2: arg1 + arg2;


装饰器：
假设我们要增强now()函数的功能，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。
log打印日志函数
       @log
       def now():
       print('2015-3-25')

偏函数：functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单
变量作用域：
          L （Local） 局部作用域
          E （Enclosing） 闭包函数外的函数中
          G （Global） 全局作用域
          B （Built-in） 内建作用域
          当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。

          修改全局变量num
          num = 1
          def fun1():
              global num  # 需要使用 global 关键字声明
              print(num)
              num = 123
              print(num)
          fun1()
          如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量
          def outer():
          num = 10
          def inner():
              nonlocal num   # nonlocal关键字声明
              num = 100
              print(num)
          inner()
          print(num)
          outer()
六、文件
open(filename, mode)
filename：filename 变量是一个包含了你要访问的文件名称的字符串值。
mode：mode决定了打开文件的模式
f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回
f.readline() 会从文件中读取单独的一行。换行符为 '\n'
f.readlines() 将返回该文件中包含的所有行。 如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。
f.write(string) 将 string 写入到文件中, 然后返回写入的字符数
f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。
如果要改变文件当前的位置, 可以使用 f.seek(offset, from_what) 函数。from_what 的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾
调用 f.close() 来关闭文件并释放系统的资源
Python引入了with语句来自动帮我们调用close()方法：
with open('/path/to/file', 'r') as f:
    print(f.read())

StringIO:在内存中读写str
f = StringIO()
f.write('hello')
f.getValue()获得写入的str
BytesIO:读写二进制数据bytes
操作文件目录：
# 查看当前目录的绝对路径:
>>> os.path.abspath('.')
'/Users/michael'
# 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:
>>> os.path.join('/Users/michael', 'testdir')
'/Users/michael/testdir'
# 然后创建一个目录:
>>> os.mkdir('/Users/michael/testdir')
# 删掉一个目录:
>>> os.rmdir('/Users/michael/testdir')
两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数
要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数

七、异常处理
首先，执行try子句（在关键字try和关键字except之间的语句）
如果没有异常发生，忽略except子句，try子句执行后结束。
如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。最后执行 try 语句之后的代码。
如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。
try:
    print('try...')
    r = 10 / 0
    print('result:', r)
except ZeroDivisionError as e:
    print('except:', e)
finally:
    print('finally...')
print('END')

八、面向对象

#类定义
class people:

    #定义基本属性
    name = ''
    age = 0

    #定义私有属性,私有属性在类外部无法直接进行访问
    __weight = 0

    #定义构造方法
    def __init__(self,n,a,w):
        self.name = n
        self.age = a
        self.__weight = w
    def speak(self):
        print("%s 说: 我 %d 岁。" %(self.name,self.age))

#单继承示例
class student(people):
    grade = ''
    def __init__(self,n,a,w,g):
        #调用父类的构函
        people.__init__(self,n,a,w)
        self.grade = g
    #覆写父类的方法
    def speak(self):
        print("%s 说: 我 %d 岁了，我在读 %d 年级"%(self.name,self.age,self.grade))
类的方法：在类地内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。

继承：class Student(BaseStudent):

type(obj)：来获取对象的相应类型；
isinstance(obj, type)：判断对象是否为指定的 type 类型的实例；
hasattr(obj, attr)：判断对象是否具有指定属性/方法；
getattr(obj, attr[, default]) 获取属性/方法的值, 要是没有对应的属性则返回 default 值（前提是设置了 default），否则会抛出 AttributeError 异常；
setattr(obj, attr, value)：设定该属性/方法的值，类似于 obj.attr=value；
dir(obj)：可以获取相应对象的所有属性和方法名的列表：

类的专有方法：
__init__ : 构造函数，在生成对象时调用
__del__ : 析构函数，释放对象时使用
__repr__ : 打印，转换
__setitem__ : 按照索引赋值
__getitem__: 按照索引获取值
__len__: 获得长度
__cmp__: 比较运算
__call__: 函数调用
__add__: 加运算
__sub__: 减运算
__mul__: 乘运算
__div__: 除运算
__mod__: 求余运算
__pow__: 乘方
_slots__：给所有实例都绑定方法，可以给class绑定方法 Student.set_score = set_score定义一个特殊的__slots__变量，来限制该class实例能添加的属性
          __slots__ = ('name', 'age') 使用__slots__要注意，__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的
@property：

class Student(object):

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value
把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值
定制类：如果一个类想被用于for ... in循环，类似list或tuple那样，就必须实现一个__iter__()方法
       要表现得像list那样按照下标取出元素，需要实现__getitem__()方法
       Python还有另一个机制，那就是写一个__getattr__()方法，动态返回一个属性。
       任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用。

枚举类：
@unique(去重)
class Weekday(Enum):
    Sun = 0 # Sun的value被设定为0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6

元类：
要创建一个class对象，type()函数依次传入3个参数：
1.class的名称；
2.继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；
3.class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。

# 创建一个 Hello 类
Hello = type('Hello', (object,), dict(hello=printHello))


九、正则表达式
re.match(pattern, string, flags=0)
pattern	匹配的正则表达式
string	要匹配的字符串。
flags	标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等

十、发送邮件
smtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] )
参数说明：
host: SMTP 服务器主机。 你可以指定主机的ip地址或者域名如:w3cschool.cc，这个是可选参数。
port: 如果你提供了 host 参数, 你需要指定 SMTP 服务使用的端口号，一般情况下SMTP端口号为25。
local_hostname: 如果SMTP在你的本机上，你只需要指定服务器地址为 localhost 即可。
SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]
参数说明：
from_addr: 邮件发送者地址。
to_addrs: 字符串列表，邮件发送地址。
msg: 发送消息

多线程：
_thread.start_new_thread ( function, args[, kwargs] )
function - 线程函数。
args - 传递给线程函数的参数,他必须是个tuple类型。
kwargs - 可选参数。

# 获取锁，用于线程同步
threadLock.acquire()
print_time(self.name, self.counter, 3)
# 释放锁，开启下一个线程
threadLock.release()
#获取ThreadLocal对象
threading.local()


JSON解析：
json.dumps(): 对数据进行编码。
json.loads(): 对数据进行解码

序列化：
Python提供了pickle模块来实现序列化  pickle.dumps(dict)  pickle.loads()方法反序列化出对象

多进程：
multiprocessing模块就是跨平台版本的多进程模块(Windowns)
Pool 启动大量的子进程，可以用进程池的方式批量创建子进程
subprocess  模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出
进程间通信:Queue Pipes

django:
创建新项目
django-admin startproject myblog
启动服务
python manage.py runserver  9999(端口号)
创建应用
python manage.py  startapp blog
创建数据表
python manage.py makeimgrations  app名字（可选）
python manage.py  migrate
创建用户
python manage.py createsuperuser